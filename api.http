#######
# Se define parte de la URL de rutas a utilizar
@api_url = http://localhost:3000/api

# Se define parte de la URL de rutas a utilizar
@api_url_2 = http://localhost:3000/api/usuarios

# Incluir el token obtenido en la siguiente línea. Por Ejemplo:
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Mywicm9sIjoiYWRtaW4iLCJpYXQiOjE3NTI3MDYwMDIsImV4cCI6MTc1MjcwOTYwMn0.1ZM_jvNh3tl2VSHxbSo_D-uwBDrwRU6oOwELarxzoos

###
# TRABAJO INTEGRADOR: API de Productos
#
# Este archivo contiene ejemplos de solicitudes para probar todos los endpoints
# de la API de productos.
#
# Para usarlo, asegúrate de tener la extensión "REST Client" en Visual Studio Code.
#
# NOTA: Los códigos de los productos y valores de productos pueden variar 
# dependiendo de cuál archivo JSON elijas para poblar tu base de datos. 
# Ajusta los valores de :codigo y otros campos según sea necesario.

###
# --- CRUD Básico ---

### OBTENER TOKEN DE AUTENTICACIÓN
### FABIO DRIZZT
POST {{api_url_2}}/login
Content-Type: application/json

{
  "email": "fabiodrizztUNTREF@gmail.com",
  "password": "12345678"
}

### JUAN NEBBIA
POST {{api_url_2}}/login
Content-Type: application/json

{
  "email": "juannebbiaUNTREF@gmail.com",
  "password": "12345678"
}

### CRISTIAN BUDANO
POST {{api_url_2}}/login
Content-Type: application/json

{
  "email": "caebar@gmail.com",
  "password": "12345678"
}

### INVITADO X
POST {{api_url_2}}/login
Content-Type: application/json

{
  "email": "invitadoxxx@gmail.com",
  "password": "12345678"
}


### 1. Obtener todos los productos
# Devuelve la lista completa de productos.
GET {{api_url}}/productos
Accept: application/json

### 2. Obtener un producto por su código
# Reemplaza '1' con un código de producto que exista en tu base de datos.
GET {{api_url}}/productos/1500
Accept: application/json

### 2.1 Obtener un producto con un código inexistente (debería dar 404)
GET {{api_url}}/productos/9999
Accept: application/json

### 3. Crear un nuevo producto
# Este endpoint agrega un nuevo producto.
# Asegúrate de que el 'codigo' sea único.
POST {{api_url}}/productos
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "codigo": 101,
    "nombre": "Zapatillas para Running",
    "precio": 85.50,
    "categoria": ["Deportivo", "Aerobico", "Calzado", "Fitness"]
}

### 4. Modificar un producto existente
# Reemplaza '1' con un código de producto que exista.
# Solo se necesita enviar los campos a modificar.
PUT {{api_url}}/productos/101
Content-Type: application/json
Authorization: Bearer {{token}}

{
    "precio": 950.00
}

### 5. Eliminar un producto
# Reemplaza '2' con un código de producto que desees eliminar.
DELETE {{api_url}}/productos/101
Accept: application/json
Authorization: Bearer {{token}}


###
# --- Endpoints Adicionales ---

### 6. Buscar productos por término
# Busca productos que contengan 'Blusa' en su nombre.
GET {{api_url}}/productos/buscar?q=blusa
Accept: application/json

### 7. Filtrar productos por categoría
# Busca productos que pertenezcan a la categoría 'Accesorios'.
GET {{api_url}}/productos/categoria/Pantalones
Accept: application/json

### 8. Filtrar productos por rango de precio
# Busca productos con precios entre 100 y 500.
GET {{api_url}}/productos/precio/10/40
Accept: application/json

### 9. Carga masiva de productos
# Agrega múltiples productos en una sola petición.
POST {{api_url}}/productos/masivo
Content-Type: application/json
Authorization: Bearer {{token}}

[
    {
        "codigo": 201,
        "nombre": "Zapatos de Vestir",
        "precio": 399.99,
        "categoria": ["Calzado", "Caballero", "Ropa"]
    },
    {
        "codigo": 202,
        "nombre": "Botas de Invierno",
        "precio": 249.50,
        "categoria": ["Calzado", "Mujer"]
    },
    {
        "codigo": 203,
        "nombre": "Zapatillas Unisex",
        "precio": 399.99,
        "categoria": ["Calzado","Mujer","Caballero", "Ropa"]
    }
]
